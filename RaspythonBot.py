#!/usr/bin/python3
# -*- coding: utf-8 -*-
#  RaspythonBot (c) 2017 - Raspython Group
#
#  Bot de moderaci√≥n creado por y para el grupo de Telegram @Raspython
# t.me/raspython
#
#

##########################################################################
##########################################################################


# Librer√≠a PTB
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

# Librer√≠a para el log
import logging

# Librer√≠a regex para filtrar textos
import re

# Importamos las constantes desde el fichero correspondiente
from constantes import TOKEN, LOG_FILE, GROUPS_ID

# Inicializamos el subsistema de log para nuestro bot. Todos los errores y las informaciones ir√°n a este fichero.
logging.basicConfig(filemode=LOG_FILE, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)


# Funci√≥n temporal. Es una forma de recoger y mostrar el ID de un usuario o un grupo para luego poder usarlo.
# Esta funci√≥n no estar√° en el bot definitivo.
def chatid(bot, update):
    # Obtenemos el ID del chat desde donde nos hablan...
    chat_id = update.message.chat_id
    # La ayuda s√≥lo la mostraremos si se ejecuta en privado. Si se hace en uno de los canales la ignoraremos.
    update.message.reply_text("El ChatID de este usuario/grupo es {}".format(chat_id))


# Funci√≥n de ayuda. Aqu√≠ iremos poniendo todos los comandos y opciones de los que vayamos dotando al bot. Lo pongo como
# primera funci√≥n para un f√°cil acceso a ella, ya que estar√° en constante crecimiento...
def bot_help(bot, update):
    # Obtenemos el ID del chat desde donde nos hablan...
    chat_id = update.message.chat_id
    # La ayuda s√≥lo la mostraremos si se ejecuta en privado. Si se hace en uno de los canales la ignoraremos.
    if chat_id not in GROUPS_ID.values():
        update.message.reply_text("""
‚ÑπÔ∏è COMANDOS Y FUNCIONES DISPONIBLES ‚ÑπÔ∏è

‚ñ™Ô∏è /normas
Muestra las reglas comunes a los canales de Raspito's Family
‚ñ™Ô∏è/canales
Muestra la relaci√≥n de canales de Raspito's Family
""")
    else:
        update.message.reply_text("‚ùóÔ∏èLa ayuda la ofrezco por privado ‚ùó\n√Åbreme un privado y env√≠a /help de nuevo...")


# Funci√≥n de arranque del Bot. Ser√° lo que se muestre cuando un usuario inicie el Bot en privado.
def start(bot, update):
    # Obtenemos el ID del chat desde donde nos hablan...
    chat_id = update.message.chat_id
    # La ayuda s√≥lo la mostraremos si se ejecuta en privado. Si se hace en uno de los canales la ignoraremos.
    if chat_id not in GROUPS_ID.values():
        update.message.reply_text("ü§ñ Bienvenido al RaspythonBot ü§ñ\n"
                                  "Bot creado y pensado para dar soporte al grupo @Raspython\n"
                                  "t.me/Raspython\n"
                                  "Pulsa /help para obtener ayuda sobre lo que puedes hacer")


# Funci√≥n que muestra la relaci√≥n de canales de la Raspito's Family
def canales(bot, update):
    # En principio este comando lo mostraremos en todos los canales. Si vemos que hay mucho flood ya lo limitaremos.
    update.message.reply_text("üî∏ Relaci√≥n de los canales de la Raspito's Family üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n\n"
                              "‚ñ´Ô∏è@GrupoRaspberryPI\n"
                              "Canal precursor de la Raspito's Family. Dialoga sobre los aspectos generales "
                              "sobre la Raspberry PI, como donde comprarla, que accesorios son recomendables, "
                              "dudas sobre configuraci√≥n, etc. En definitiva, todo lo relacionado sobre nuestras "
                              "PI que no abarquen m√°s espec√≠ficamente el resto de canales de la familia.\n\n"
                              "‚ñ´Ô∏è@RaspberryPiMediacenters\n"
                              "Canal enfocado al uso y disfrute de nuestras Raspberry Pi como centro multimedia.\n\n"
                              "‚ñ´ @RaspberryPiEmuladores"
                              "Canal dedicado a la tem√°tica sobre emulaci√≥n en nuestras Raspberry Pi. Configura tu "
                              "peque√±a Pi como un centro de juego arcade. Disfruta con la emulaci√≥n!.\n\n"
                              "‚ñ´ @Raspython\n"
                              "Grupo para debatir, dialogar y preguntar sobre todo lo relacionado con la programaci√≥n "
                              "en Python y Raspberry. Este Bot es precisamente un proyecto desarrollado en este canal. "
                              "√önete y disfruta.\n\n‚ñ´ @RaspberryPiOfftopic\n"
                              "¬øTe apetece hablar con los compa√±eros de la Raspito's family sobre cualquier otro "
                              "tema?, pues este es tu canal. Entra charla, comparte y disfruta con el resto de "
                              "compa√±eros sin l√≠mite de tem√°tica. (Contenido sexual expl√≠cito, violento y de tem√°ticas "
                              "similares est√° prohibido)")


# Funci√≥n que tiene como objeto mostrar las reglas del grupo
# De momento las ponemos est√°ticas en el c√≥digo, pero la idea es que sean modificables por los moderadores, por lo que
# en un futuro residir√°n en un fichero
def normas(bot, update):
    # En principio este comando lo mostraremos en todos los canales. Si vemos que hay mucho flood ya lo limitaremos.
    update.message.reply_text("üìú Las reglas de este grupo son muy sencillas...\n\n"
                              "‚õîÔ∏èNada de sexo expl√≠cito, ni pol√≠tica, ni religi√≥n, ni nada no relacionado "
                              "con la tem√°tica del canal.\n"
                              "üö´ Tampoco est√°n permitidos los enlaces a otros grupos o p√°ginas webs que cumplan "
                              "los criterios anteriormente descritos.\n"
                              "‚ùì En caso de dudas, consultar con cualquier administrador del grupo.\n\n"
                              "ü§ôüèº Como √∫ltimo requisito, pasarlo bien, disfrutar, compartir y que fluya el buen rollo")


# En esta funci√≥n trataremos los comandos no reconocidos. De momento lo dejamos en "pass" para ignorarlos
def comando_invalido(bot, update):
    pass


# Funci√≥n en la que filtraremos los datos enviados por el usuario y que trataremos seg√∫n corresponda
def trata_texto(bot, update):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    texto = update.message.text
    # En el siguiente ejemplo, si alguien mete la palabra bot, responderemos con un mensaje y el id del usuario y grupo
    # Es un ejemplo temporal. Aqu√≠ ir√°n los tratamientos de env√≠os a otros canales, y los lanzadores a trav√©s de tags
#    if re.search(r"(?i)\bbot\b", texto):
#        update.message.reply_text("¬øMe has nombrado?\n"
#                                  "Que sepas que me hablas desde {} y tu ID es {}\n".format(chat_id, user_id))
    if re.search(r"(?i)qu[e√©] es raspito\b", texto):
         update.message.reply_text("...son los padres")


def bienvenida(bot, update):
    chat_id = update.message.chat_id
    if chat_id == GROUPS_ID["Raspython"]:
        update.message.reply_text("Bienvenido al grupo de Raspython... DISFRUTA Y PARTICIPA! üëãüèº\n"
                                  "√Åbreme un privado para obtener informaci√≥n...")


def main():
    # Inicializamos nuestro bot
    raspython_bot = Updater(token=TOKEN)
    # Generamos el dispatcher para recoger los comandos y textos del chat
    dispatcher = raspython_bot.dispatcher

    # Definici√≥n de los comandos
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", bot_help))
    dispatcher.add_handler(CommandHandler("canales", canales))
    dispatcher.add_handler(CommandHandler("normas", normas))
    dispatcher.add_handler(CommandHandler("chatid", chatid))

    # Capturador de nuevos miembros
    dispatcher.add_handler(MessageHandler(Filters.status_update.new_chat_members, bienvenida))

    # Capturador de comandos no reconocidos
    dispatcher.add_handler(MessageHandler(Filters.command, comando_invalido))

    # Capturador de textos. Capturaremos aquello que no sean comandos expl√≠citos
    dispatcher.add_handler(MessageHandler(Filters.text, trata_texto))

    # Arrancamos el bot, empezamos a capturar peticiones
    # Con clean ignoramos los mensajes pendientes...
    raspython_bot.start_polling(clean=True)
    #  Y lo dejamos esperando
    raspython_bot.idle()


if __name__ == "__main__":
    main()
